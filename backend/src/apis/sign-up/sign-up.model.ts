import {ProfileSchema} from "../profile/profile.model.ts";
import {z} from "zod/v4";

/**
 * Zod schema for validating sign-up requests.
 *
 * - Starts with ProfileSchema but omits fields that are:
 *   - auto-generated by the system (profileId, profileCreatedAt, activation token)
 *   - internal-only (passwordHash)
 *   - not collected during sign-up (location, resumeUrl)
 *
 * - Adds two new fields for password entry:
 *   - profilePassword (user-supplied plain password)
 *   - profilePasswordConfirm (confirmation, must match password)
 *
 * - Adds a refinement to ensure password === passwordConfirm.
 *
 * NOTE:
 * After validation, you will hash `profilePassword` and store it in
 * `profilePasswordHash` before inserting into the DB.
 */

export const SignUpProfileSchema = ProfileSchema.omit({profileId: true, profileActivationToken: true, profileCreatedAt: true, profilePasswordHash: true, profileLocation: true, profileResumeUrl: true })
.extend({
    profilePassword: z.string('Profile password must be at least 8 characters.')
        .min(8, 'Password must be at least 8 characters.')
        .max(32, 'Password must be at most 32 characters.'),
    profilePasswordConfirm: z.string('Profile password confirmation must match password.')
        .min(8, 'Password must be at least 8 characters.')
        .max(32, 'Password must be at most 32 characters.')
})
.refine((data) => data.profilePassword === data.profilePasswordConfirm, {
    message: 'Passwords do not match.'
});